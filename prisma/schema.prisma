// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Directory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  county  County[]
  comments DirectoryComment[]
   published Boolean  @default(false)
  viewCount Int      @default(0)
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}

model County {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  directory    Directory  @relation(fields: [directoryId], references: [id])
  directoryId  String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts District[]
  name      String
}

model District {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  economicData EconomicData[]
  businessParks BusinessPark[]
  councilServices CouncilService[]
  localNews LocalNews[]
  councilGrants CouncilGrant[]
}

model EconomicData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workingAgePopulation Int
  labourDemand Float
  noOfRetailShops Int
  unemploymentRate Int
  employmentInvstmentLand Int
  numOfRegisteredCompanies Int
  numOfBusinessParks Int
  averageHousingCost Int
  averageWageEarnings Int
}

model BusinessPark {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  description String
  email String
  phoneNumber String
  website String
}

model CouncilService {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  name      String
  summary String
  description String
  email String
  phoneNumber String
  website String
}

model LocalNews {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  description String
  email String
  spotLight SpotLight[]
}

model SpotLight {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  localNews LocalNews @relation(fields: [localNewsId], references: [id])
  localNewsId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  description String  
  email String
  phoneNumber String
  website String
}

model CouncilGrant {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  name      String
  summary String
  description String
  email String
  phoneNumber String
  website String
}

model PartnerData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organisation Organisation @relation(fields: [organisationId], references: [id])
  organisationId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  title      String
  description String
  category  String
  businessType String
  website String
  isLive Boolean @default(false)
  isHidden Boolean @default(false)
  isApproved Boolean @default(false)
  status Status @default(ONHOLD)
  areaOfOperation AreasOfOperation @default(STARTUP)
  comments SupportDataComment[]
}



// Comments contain a comment string and connect back to the directory.
// directoryId must have @db.ObjectId to match up with Directory's id type
model DirectoryComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  directory    Directory  @relation(fields: [directoryId], references: [id])
  directoryId  String @db.ObjectId
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}

model SupportDataComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  partnerData PartnerData @relation(fields: [partnerDataId], references: [id])
  partnerDataId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String
  password String?
  isAdmin Boolean @default(false)
  organisation Organisation?
  postCode String?
  acceptTermsAndConditions Boolean @default(false)
  county String?
  district String?
  role Role @default(USER)
  contactNumber String?
  directories Directory[]
  partnerData PartnerData[]
  tokens Token[]
  refreshTokens RefreshToken[]
  supportDataComments SupportDataComment[]
  directoryComments DirectoryComment[]
}
model Organisation {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  partnerData PartnerData[]
}

model Token {
 id         String @id @default(auto()) @map("_id") @db.ObjectId
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime 
  userId String
  user   User      @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


enum Role {
  PARTNER
  COUNTY_EDITOR
  SS_EDITOR
  USER
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  API
}

enum Counties {
 SHETLAND_ISLANDS
 ORKNEY_ISLANDS
 CAITHNESS
 SUTHERLAND
 ROSS_CROMARTY
INVERNESS_SHIRE
}

enum AreasOfOperation {
  STARTUP
  SMALL_BUSINESS
  GROWING_BUSINESS
  BAME
  WOMEN_OWNED
  ENTERPRISE
  OTHER
}

enum Status {
  LIVE
  ONHOLD
  CLOSED
  HIDDEN
}
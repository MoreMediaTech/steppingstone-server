// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model County {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts District[]
  welcome Welcome?
  lep LEP?
  news News?
  imageUrl String?
  logoIcon String?
  name String @unique
  published Boolean  @default(false)
  viewCount Int      @default(0)
  comments Comment[]
  sections Section[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}


// ************* Models for each section under the county **************
model Welcome {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  summary String?
  isLive  Boolean @default(false)
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId @unique
  }

model LEP {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  summary String?
  isLive  Boolean @default(false)
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId @unique
  }

  model News {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  summary String?
  isLive  Boolean @default(false)
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId @unique
  }

model District {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  imageUrl      String?
  logoIcon String?
  isLive Boolean @default(false)
  districtSections DistrictSection[]
}

model Section {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  title      String? @unique
  content      String?
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  summary String?
  isSubSection Boolean? @default(false)
  isLive Boolean @default(false)
  subsections SubSection[]
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId @unique
}

model SubSection {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  title      String? @unique
  content      String?
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  summary String?
  isLive Boolean @default(false)
  isSubSubSection Boolean? @default(false)
  subSubSections SubSubSection[]
  section  Section @relation(fields: [sectionId], references: [id])
  sectionId String @db.ObjectId @unique
}

model SubSubSection {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  title      String? @unique
  content      String?
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  summary String?
  isLive Boolean @default(false)
  subSection  SubSection @relation(fields: [subSectionId], references: [id])
  subSectionId String @db.ObjectId @unique
}
// ********************** Submodel for each district ********************

model DistrictSection {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  title      String? @unique
  content      String?
  imageUrl      String?
    author String?
  summary String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  isEconomicData Boolean? @default(false)
  isLive Boolean? @default(false)
  economicDataWidgets EconomicDataWidget[]
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId @unique
}

// ******** EconomicData ********

model EconomicDataWidget {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title     String @unique
  stats     String
  descriptionLine1 String
  descriptionLine2 String?
  linkName      String
  linkUrl      String
  districtSection DistrictSection @relation(fields: [districtSectionId], references: [id])
  districtSectionId String @db.ObjectId @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model PartnerData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organisation Organisation @relation(fields: [organisationId], references: [id])
  organisationId String @db.ObjectId @unique
  partner User @relation(fields: [partnerId], references: [id])
  partnerId String @db.ObjectId @unique
  businessType String?
  website String?
  valueCategory String?
  partnerType PartnerType @default(PARTNER)
  position String
  projectsResponsibleFor String
  closingDate String
  isEmail Boolean @default(false)
  status Status? @default(ONHOLD)
  areaOfOperation AreasOfOperation? @default(STARTUP)
  comments SupportDataComment[]
}

// Comments contain a comment string and connect back to the directory.
// directoryId must have @db.ObjectId to match up with Directory's id type
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  county  County @relation(fields: [countyId], references: [id], onDelete: Cascade)
  countyId String @db.ObjectId @unique
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String    @db.ObjectId @unique
  parent Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("ParentChild")
  parentId String? @db.ObjectId
  likes Like[]
}

model Like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId @unique
  numberOfLikes Int @default(0) 
}

model SupportDataComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  partnerData PartnerData @relation(fields: [partnerDataId], references: [id])
  partnerDataId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId @unique
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String
  password String?
  isAdmin Boolean @default(false)
  isSuperAdmin Boolean @default(false)
  organisation Organisation?
  postCode String?
  imageUrl String?
  isNewsletterSubscribed Boolean @default(false)
  acceptTermsAndConditions Boolean @default(false)
  isNewlyRegistered Boolean @default(true)
  emailVerified Boolean @default(false)
  isSupportTechnician Boolean @default(false)
  county String?
  district String?
  role Role @default(USER)
  contactNumber String?
  counties County[]
  partnerData PartnerData[]
  tokens Token?
  refreshTokens RefreshToken[]
  supportDataComments SupportDataComment[]
 comments Comment[]
 recipientMessages Message[] @relation("recipient")
senderMessages Message[] @relation("sender")
 favorites FavoriteItem[]
 pushTokens PushToken[]
 allowsPushNotifications Boolean @default(false)
 notifications Notifications[]
  feedback Feedback[]
  supportLogs SupportLog[]
  likes Like[]
  userFolders UserFolder[]
}

model Organisation {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  partnerData PartnerData[]
}

model Token {
 id         String @id @default(auto()) @map("_id") @db.ObjectId
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType @default(EMAIL)
  emailToken String?   @unique // Only used for short lived email tokens
  oneTimeCode String?   @unique
  valid      Boolean   @default(true)
  expiration DateTime 
  userId String @db.ObjectId @unique
  user   User      @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String @unique
  userId      String @db.ObjectId @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject String
  company String?
  html String
  message String?
  isArchived Boolean? @default(false)
  messageType MessageType @default(ENQUIRY) @unique
  isRead Boolean @default(false)
  recipient User? @relation("recipient", fields: [recipientId], references: [id])
  recipientId String? @db.ObjectId @unique
  sender User? @relation("sender",fields: [senderId], references: [id])
  senderId String? @db.ObjectId @unique
  messageFolders MessageFolders[]
}

model Folder {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @unique
  userFolders UserFolder[]
  messageFolders MessageFolders[]
}

model UserFolder {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folder Folder @relation(fields: [folderId], references: [id])
  folderId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
}

model MessageFolders {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folder Folder @relation(fields: [folderId], references: [id])
  folderId String @db.ObjectId @unique
  message Message @relation(fields: [messageId], references: [id])
  messageId String @db.ObjectId @unique
}


model BusinessSupportInformation {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category String @unique
  description String
  webLink String
  canEmail Boolean @default(false)
  type    SourceDirectoryType @default(BSI) @unique
}

model IndustrySector {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category String @unique
  description String
  webLink String
  canEmail Boolean @default(false)
  type    SourceDirectoryType @default(IS) @unique
}

model EconomicUpdate {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category String @unique
  description String
  webLink String
  canEmail Boolean @default(false)
  type    SourceDirectoryType @default(EU) @unique
}

model FavoriteItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  contentId String @unique
  districtId String? @db.ObjectId @unique
  countyId String? @db.ObjectId @unique
}

model LoadTimes {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loadTime Float
  name String
  date String
  type LoadTimeTypes @default(MOBILE_APP_COMPONENT)
  userId String @db.ObjectId @unique
}

model OnlineUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId @unique
  type OnlineUserTypes @default(MOBILE_APP)
}

model PushToken {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token String @unique
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
}

model Pdf {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  content Bytes?
}

model Notifications {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  body String
  sectionId String? @unique @db.ObjectId
  type NotificationTypes @default(MESSAGE)
  isRead Boolean @default(false)
  authorId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
}

model Feedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  contenId String? @unique @db.ObjectId
  countyId String @unique @db.ObjectId
  feedback String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId @unique
}

model RequestErrorLog {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  error String
  path String
  errorType String
}

model SupportLog {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId() @unique()
  technicianId String @db.ObjectId() @unique()
  technicianName String
  attention Boolean @default(false)
  message String
  status Status @default(LIVE)
  parent SupportLog? @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children SupportLog[] @relation("ParentChild")
  parentId String? @db.ObjectId
}

model Advert {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  title      String? @unique
  content      String?
  imageUrl      String?
  videoUrl      String?
  videoTitle      String?
  videoDescription      String?
  author String?
  authorId String @db.ObjectId @unique
  summary String?
  published Boolean @default(false)
}

// ************* Enums **************

enum Role {
  PARTNER
  EDITOR
  ADMIN
  SUPERADMIN
  USER
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  ONE_TIME_CODE // used as a short-lived token sent to the user's email
  RESET_PASSWORD
}

enum MessageType {
  ENQUIRY
  WELCOME
  RESPONSE
  SUPPORTREQUEST
  IN_APP
  RESET_PASSWORD
  RESET_PASSWORD_SUCCESS
  CONFIRM_EMAIL
  CONFRIM_EMAIL_SUCCESS
  VERIFY_EMAIL
  VERIFY_EMAIL_SUCCESS
}

enum Counties {
 SHETLAND_ISLANDS
 ORKNEY_ISLANDS
 CAITHNESS
 SUTHERLAND
 ROSS_CROMARTY
INVERNESS_SHIRE
}

enum AreasOfOperation {
  STARTUP
  SMALL_BUSINESS
  GROWING_BUSINESS
  BAME
  WOMEN_OWNED
  ENTERPRISE
  OTHER
}

enum Status {
  LIVE
  ONHOLD
  CLOSED
  HIDDEN
}

enum PartnerType {
  PARTNER
  LEAD_PARTNER
  SENIOR_CONTACT
}

// BSI - Business Support Information
// IS - Industry Sector
// EU - Economic Update
enum SourceDirectoryType {
  BSI
  IS
  EU
}

enum LoadTimeTypes {
  MOBILE_APP_COMPONENT
  WEB_APP_COMPONENT
  SCREEN
  PAGE
}

enum OnlineUserTypes {
  MOBILE_APP
  WEB_APP
}

enum NotificationTypes {
  MESSAGE
  COMMENT
  FEEDBACK
  CONTENT
}

// ************* Types **************

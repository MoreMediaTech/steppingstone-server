// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model County {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts District[]
  welcome Welcome?
  lep LEP[]
  news News[]
  imageUrl String?
  name String @unique
  published Boolean  @default(false)
  viewCount Int      @default(0)
  comments Comment[]
  supportForStartups SupportForStartup[]
   topicalBusinessIssues TopicalBusinessIssues[]
  businessNewsAndInformation BusinessNewsAndInformation[]
  supportForEstablishedBusiness SupportForEstablishedBusiness[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}


// ************* Models for each section under the county **************
model Welcome {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
  }

model LEP {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
  }

  model News {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
  }

model District {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  imageUrl      String?
  economicData EconomicData[]
  businessParks BusinessPark[]
  councilServices CouncilService[]
  localNews LocalNews[]
  councilGrants CouncilGrant[]
  whyInvest WhyInvest?
 
}

// ******** models for each topic under each district ********

// ******** SupportForStartup ********
model SupportForStartup {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vatAndTax VatAndTax[]
  MarketResearch MarketResearch[]
  LegalChecklist LegalChecklist[]
  findStartUpFunding FindStartUpFunding[]
  businessPlans BusinessPlans[]
  businessInsurance BusinessInsurance[]
  becomeAGreenerBusiness BecomeAGreenerBusiness[]
 county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
}

model VatAndTax {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

model MarketResearch {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

model LegalChecklist {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

model FindStartUpFunding {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

model BusinessPlans {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

model BusinessInsurance {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

model BecomeAGreenerBusiness {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  supportForStartup SupportForStartup @relation(fields: [supportForStartupId], references: [id])
  supportForStartupId String @db.ObjectId
}

// **********************************************************************

// ******** TopicalBusinessIssues ********
model TopicalBusinessIssues {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  helpForSocialEnterprises HelpForSocialEnterprises[]
  helpForMentalHealthAndWellbeing HelpForMentalHealthAndWellbeing[]
  helpForHeritageAndTourism HelpForHeritageAndTourism[]
  helpForCovidBusinessSupport HelpForCovidBusinessSupport[]
  helpForCarbonAndNetZeroTargets HelpForCarbonAndNetZeroTargets[]
 county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
}

model HelpForSocialEnterprises {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  topicalBusinessIssues TopicalBusinessIssues @relation(fields: [topicalBusinessIssuesId], references: [id])
  topicalBusinessIssuesId String @db.ObjectId
}

model HelpForMentalHealthAndWellbeing {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  topicalBusinessIssues TopicalBusinessIssues @relation(fields: [topicalBusinessIssuesId], references: [id])
  topicalBusinessIssuesId String @db.ObjectId
}

model HelpForHeritageAndTourism {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  topicalBusinessIssues TopicalBusinessIssues @relation(fields: [topicalBusinessIssuesId], references: [id])
  topicalBusinessIssuesId String @db.ObjectId
}

model HelpForCovidBusinessSupport {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  topicalBusinessIssues TopicalBusinessIssues @relation(fields: [topicalBusinessIssuesId], references: [id])
  topicalBusinessIssuesId String @db.ObjectId
}

model HelpForCarbonAndNetZeroTargets {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  topicalBusinessIssues TopicalBusinessIssues @relation(fields: [topicalBusinessIssuesId], references: [id])
  topicalBusinessIssuesId String @db.ObjectId
}

// **********************************************************************

// ******** BusinessNewsAndInformation ********
model BusinessNewsAndInformation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
}

// ******** SupportForEstablishedBusiness ********
model SupportForEstablishedBusiness {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  content      String
  imageUrl      String
 county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
}
// **********************************************************************


// ******** WhyInvest ********
model WhyInvest {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String @unique
  imageUrl   String
  content    String
  }

// ******** EconomicData ********
model EconomicData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workingAgePopulation Int
  labourDemand Float
  noOfRetailShops Int
  unemploymentRate Int
  employmentInvstmentLand Int
  numOfRegisteredCompanies Int
  numOfBusinessParks Int
  averageHousingCost Int
  averageWageEarnings Int
}

// ******** BusinessPark ********
model BusinessPark {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  description String
  email String
  phoneNumber String
  website String
}


// ******** CouncilService ********
model CouncilService {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  name      String
  summary String
  description String
  email String
  phoneNumber String
  website String
}


// ******** LocalNews ********
model LocalNews {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  description String
  email String
  spotLight SpotLight[]
}


// ******** SpotLight ********
model SpotLight {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  localNews LocalNews @relation(fields: [localNewsId], references: [id])
  localNewsId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title      String
  description String  
  email String
  phoneNumber String
  website String
}


// ******** CouncilGrant ********
model CouncilGrant {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  district  District @relation(fields: [districtId], references: [id])
  districtId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  name      String
  summary String
  description String
  email String
  phoneNumber String
  website String
}






model PartnerData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organisation Organisation @relation(fields: [organisationId], references: [id])
  organisationId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  title    String
  subtitle String
  description String
  category  String
  businessType String
  website String
  isLive Boolean @default(false)
  isHidden Boolean @default(false)
  isApproved Boolean @default(false)
  status Status @default(ONHOLD)
  areaOfOperation AreasOfOperation @default(STARTUP)
  comments SupportDataComment[]
}



// Comments contain a comment string and connect back to the directory.
// directoryId must have @db.ObjectId to match up with Directory's id type
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  county  County @relation(fields: [countyId], references: [id])
  countyId String @db.ObjectId
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}

model SupportDataComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  partnerData PartnerData @relation(fields: [partnerDataId], references: [id])
  partnerDataId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String
  password String?
  isAdmin Boolean @default(false)
  organisation Organisation?
  postCode String?
  acceptTermsAndConditions Boolean @default(false)
  emailVerified Boolean @default(false)
  county String?
  district String?
  role Role @default(USER)
  contactNumber String?
  counties County[]
  partnerData PartnerData[]
  tokens Token?
  refreshTokens RefreshToken[]
  supportDataComments SupportDataComment[]
 comments Comment[]
}
model Organisation {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  partnerData PartnerData[]
}

model Token {
 id         String @id @default(auto()) @map("_id") @db.ObjectId
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType @default(EMAIL)
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime 
  userId String
  user   User      @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from     String
  to String
  subject String
  company String
  html String
  emailType EmailType @default(ENQUIRY)
}


enum Role {
  PARTNER
  COUNTY_EDITOR
  SS_EDITOR
  USER
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  RESET_PASSWORD
}

enum EmailType {
  ENQUIRY
  WELCOME
  RESET_PASSWORD
  RESET_PASSWORD_SUCCESS
  CONFIRM_EMAIL
  CONFRIM_EMAIL_SUCCESS
  VERIFY_EMAIL
  VERIFY_EMAIL_SUCCESS
}

enum Counties {
 SHETLAND_ISLANDS
 ORKNEY_ISLANDS
 CAITHNESS
 SUTHERLAND
 ROSS_CROMARTY
INVERNESS_SHIRE
}

enum AreasOfOperation {
  STARTUP
  SMALL_BUSINESS
  GROWING_BUSINESS
  BAME
  WOMEN_OWNED
  ENTERPRISE
  OTHER
}

enum Status {
  LIVE
  ONHOLD
  CLOSED
  HIDDEN
}